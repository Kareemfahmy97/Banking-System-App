[{"F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\index.js":"1","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\App.js":"2","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\components\\layout\\Modal.js":"3","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\store\\index.js":"4","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\store\\table-slice.js":"5","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\components\\layout\\NavBar.js":"6","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\store\\new-actions.js":"7","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\components\\layout\\UsersTableData.js":"8","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\components\\layout\\VerticalCenteredModal.js":"9","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\components\\layout\\TransHistoryTable.js":"10","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\components\\layout\\Home.js":"11","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\components\\layout\\GetUsersButton.js":"12","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\components\\layout\\TransHistoryButton.js":"13"},{"size":440,"mtime":1655407766640,"results":"14","hashOfConfig":"15"},{"size":2070,"mtime":1655452847474,"results":"16","hashOfConfig":"15"},{"size":8575,"mtime":1655467735232,"results":"17","hashOfConfig":"15"},{"size":356,"mtime":1655463751320,"results":"18","hashOfConfig":"15"},{"size":3126,"mtime":1655465286343,"results":"19","hashOfConfig":"15"},{"size":1118,"mtime":1655482053526,"results":"20","hashOfConfig":"15"},{"size":2650,"mtime":1655405006946,"results":"21","hashOfConfig":"15"},{"size":1391,"mtime":1655475843677,"results":"22","hashOfConfig":"15"},{"size":691,"mtime":1655468036458,"results":"23","hashOfConfig":"15"},{"size":1242,"mtime":1655467423205,"results":"24","hashOfConfig":"15"},{"size":2255,"mtime":1655480150606,"results":"25","hashOfConfig":"15"},{"size":1148,"mtime":1655467336324,"results":"26","hashOfConfig":"15"},{"size":1152,"mtime":1655467764763,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"13vyo2t",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"30"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"30"},"F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\index.js",[],["63","64"],"F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\App.js",["65","66"],"// import Users from './components/users/Users';\n\nimport { Fragment} from \"react\";\nimport GetUsersButton from './components/layout/GetUsersButton'\n// import { useDispatch, useSelector } from 'react-redux';\nimport NavBar from './components/layout/NavBar';\nimport TransHistoryButton from './components/layout/TransHistoryButton'\nimport UsersTableData from \"./components/layout/UsersTableData\";\nimport { Routes, Route, Link, Navigate } from \"react-router-dom\";\nimport Home from \"./components/layout/Home\";\n// import { useDispatch } from \"react-redux\";\n// import { fetchMyTableHistory } from \"./store/table-slice\";\n\n// let initialValue  = true;\n// let ifButtonClicked = true;\nfunction App() {\n  // const dispatch = useDispatch();\n  // useEffect(() => {\n  //   dispatch(fetchMyTableHistory());\n  // }, [fetchMyTableHistory, dispatch]);\n  return (\n    // <Routes>\n    <Fragment>\n      <NavBar />\n      <Routes>\n        <Route path=\"/AllUsers\" element={<GetUsersButton />} />\n        <Route path=\"/Home\" element={<Home />} />\n        <Route path=\"/History-Trans\" element={<TransHistoryButton />} />\n        <Route path=\"*\" element={<Navigate to=\"/Home\" replace />} />\n      </Routes>\n      {/* </Routes> */}\n      {/* <NavBar />\n\n      <TransHistoryTable /> */}\n      {/* {ifButtonClicked ? <UsersTable /> : \"\"} */}\n\n      {/* <UsersTable />\n      <Users /> */}\n    </Fragment>\n  );\n}\n\nexport default App;\n\n// import { useSelector } from \"react-redux\";\n// import { useDispatch } from \"react-redux\";\n  // const dispatch = useDispatch();\n  // const showTable = useSelector((state) => state.ui.tableIsVisible);\n  // const cart = useSelector((state) => state.cart);\n  // const notification = useSelector((state) => state.ui.notification);\n\n  // useEffect(()=>{\n  //   dispatch(fetchTableData());\n  // },[dispatch]);\n\n  // useEffect(() => {\n    //         if (initialValue) {\n      //           initialValue = false;\n      //           return;\n      //         }\n  //         if(cart.changed){\n  //           dispatch(sendTableData(cart));\n  //         }\n\n  // }, [cart, dispatch]);","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\components\\layout\\Modal.js",["67","68","69","70","71","72","73"],"import {\r\n  Modal,\r\n  Button,\r\n  Form,\r\n  DropdownButton,\r\n  Dropdown,\r\n  Alert,\r\n} from \"react-bootstrap\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport MyVerticallyCenteredModal from \"./VerticalCenteredModal\";\r\nimport {\r\n  updateUserData,\r\n} from \"../../store/new-actions\";\r\nimport { setTableTrans } from \"../../store/table-slice\";\r\n\r\nfunction ModalMe(props) {\r\n  const { modalKey } = props;\r\n  const dispatch = useDispatch();\r\n  //States of buttons to recieve and store values and clicks\r\n  const [show, setShow] = useState(false);\r\n  const [keyOfSender, setKeyOfSender] = useState(null);\r\n  const [keyOfReceiver, setKeyOfReceiver] = useState(null);\r\n  const [moneyValue, setMoneyValue] = useState(0);\r\n  const [userMessage, setUserMessage] = useState(\"\");\r\n  const [valueCompareCheck, setValueCompareCheck] = useState(false);\r\n  const [firstUserData, setFirstUserData] = useState(null);\r\n  const [secondUserData, setSecondUserData] = useState(null);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [minusValue, setMinusValue] = useState(false);\r\n  const [errorMsg, setErrorMsg] = useState(false);\r\n  const [moneyLimit, setMoneyLimit] = useState(\"\");\r\n  const [inputOnFocus, setInputOnFocus] = useState(false);\r\n\r\n  const finalUsers = useSelector((state) => state.users.data);\r\n\r\n  // Handles to use state and event trageting\r\n  const handleClose = () => setShow(false);\r\n  const onFocus = () => setInputOnFocus(true);\r\n  const onBlur = () => setInputOnFocus(false);\r\n  const handleShow = () => {\r\n    setShow(true);\r\n    setKeyOfSender(modalKey);\r\n    finalUsers.forEach((element) => {\r\n      if (element.id == modalKey) {\r\n        setFirstUserData(element);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Filter All Users and get firstUserData\r\n  const handleSend = (event) => {\r\n    setKeyOfSender(event);\r\n    finalUsers.forEach((element) => {\r\n      if (element.id == event) {\r\n        setFirstUserData(element);\r\n      }\r\n    });\r\n    const sameUser = keyOfReceiver == event;\r\n    sameUser ? setErrorMsg(true) : setErrorMsg(false);\r\n  };\r\n\r\n  // Filter All Users and get secondUserData\r\n\r\n  const handleReceive = (event) => {\r\n    setKeyOfReceiver(event);\r\n    finalUsers.forEach((secondUser) => {\r\n      if (secondUser.id == event) {\r\n        setSecondUserData(secondUser);\r\n      }\r\n    });\r\n    const sameUser = event == keyOfSender;\r\n    sameUser ? setErrorMsg(true) : setErrorMsg(false);\r\n  };\r\n\r\n  // Get Inputs\r\n  const getInputValue = (event) => {\r\n    const inputValue = event.target.value;\r\n    setMoneyValue(inputValue);\r\n    setMoneyLimit(inputValue.slice(0, 6));\r\n\r\n\r\n    if (\r\n      inputOnFocus &&\r\n      (inputValue.includes(\"-\") ||\r\n        inputValue <= 0 ||\r\n        inputValue > firstUserData.accBalance)\r\n    ) {\r\n      setMinusValue(true);\r\n    } else {\r\n      setMinusValue(false);\r\n    }\r\n  };\r\n  const getMessageValue = (event) => {\r\n    setUserMessage(event.target.value);\r\n  };\r\n\r\n  // Closeing Handle\r\n  const handleDone = () => {\r\n    let moneyNumber = Number(moneyValue);\r\n    if (firstUserData.accBalance < moneyNumber) {\r\n      console.log(\"no you cant exceed the balance\");\r\n    } else if (keyOfReceiver === keyOfSender) {\r\n      setValueCompareCheck(true);\r\n    } else {\r\n      setValueCompareCheck(false);\r\n\r\n      const amountChange = firstUserData.accBalance - moneyNumber;\r\n\r\n      const myDate = new Date(Date.now());\r\n      dispatch(\r\n        setTableTrans({\r\n          firstUser: firstUserData.name,\r\n          secondUser: secondUserData.name,\r\n          key: myDate,\r\n          amountChange: moneyNumber,\r\n          lastTrans: myDate.toGMTString(),\r\n        })\r\n      );\r\n      dispatch(\r\n        updateUserData({\r\n          allData: firstUserData,\r\n          userId: firstUserData.id,\r\n          amountChange: firstUserData.accBalance - moneyNumber,\r\n          lastTrans: myDate.toGMTString(),\r\n        })\r\n      );\r\n      dispatch(\r\n        updateUserData({\r\n          allData: secondUserData,\r\n          userId: secondUserData.id,\r\n          amountChange: secondUserData.accBalance + moneyNumber,\r\n          lastTrans: myDate.toGMTString(),\r\n        })\r\n      );\r\n\r\n      setShow(false);\r\n      setModalShow(true);\r\n    }\r\n  };\r\n  const displayError = errorMsg && (\r\n    <p class=\"text-danger bg-light\">'You can't choose same user!'</p>\r\n  );\r\n  const chooseUserMsg = (\r\n    <p class={displayError ? \"text-danger\" : \"text-secondary\"}>\r\n      Choose another user\r\n    </p>\r\n  );\r\n\r\n  const usersSelected = () => {\r\n    if (moneyValue.length <= 5 && keyOfSender >= 0 && keyOfReceiver >= 0) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n \r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"primary\" size=\"sm\" onClick={handleShow}>\r\n        Transfer\r\n      </Button>\r\n\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Sending Money</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\r\n              <Form.Label>Name of Sending User</Form.Label>\r\n\r\n              <DropdownButton\r\n                title={\r\n                  firstUserData === null\r\n                    ? \"User Will Send Money\"\r\n                    : `\"${firstUserData.name}\" Balance: $${firstUserData.accBalance}`\r\n                }\r\n                id=\"dropdown-menu-align-right\"\r\n                onSelect={handleSend}\r\n              >\r\n                {finalUsers.map((user) => (\r\n                  <Dropdown.Item eventKey={user.id}>\r\n                    {user.key} - {user.name} : ${user.accBalance}\r\n                    <Dropdown.Divider />\r\n                  </Dropdown.Item>\r\n                ))}\r\n                \r\n              </DropdownButton>\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\r\n              <Form.Label>Name of Recieving User</Form.Label>\r\n              <DropdownButton\r\n                title={\r\n                  secondUserData === null\r\n                    ? \"User Will Receive Money\"\r\n                    : `\"${secondUserData.name}\"  Balance: $${secondUserData.accBalance}`\r\n                }\r\n                id=\"dropdown-menu-align-right\"\r\n                onSelect={handleReceive}\r\n              >\r\n                {finalUsers.map((user) => (\r\n                  <Dropdown.Item eventKey={user.id}>\r\n                    {user.key} - {user.name} : ${user.accBalance}\r\n                    <Dropdown.Divider />\r\n                  </Dropdown.Item>\r\n                ))}\r\n              </DropdownButton>\r\n            </Form.Group>\r\n            {chooseUserMsg}\r\n            <Form.Group\r\n              className=\"mb-3\"\r\n              controlId=\"exampleForm.ControlTextarea2\"\r\n            >\r\n              <Form.Label>Amount</Form.Label>\r\n              <Form.Control\r\n                type=\"number\"\r\n                placeholder=\"Ex: $25\"\r\n                min={1}\r\n                maxLength={5}\r\n                onChange={getInputValue}\r\n                value={moneyLimit}\r\n                rows={3}\r\n                onFocus={onFocus}\r\n                onBlur={onBlur}\r\n                color=\"text-danger\"\r\n              />\r\n              <Form.Control\r\n                type=\"text\"\r\n                disabled={usersSelected()}\r\n                placeholder={\"Optional: Leave a message for the user\"}\r\n                onChange={getMessageValue}\r\n                autoFocus\r\n              />\r\n            </Form.Group>\r\n          </Form>\r\n          {displayError}\r\n          {!valueCompareCheck ? (\r\n            \"\"\r\n          ) : (\r\n            <Alert key=\"ALERT\" variant=\"danger\">\r\n              You can't choose same users!\r\n            </Alert>\r\n          )}\r\n          {minusValue ? (\r\n            <Alert key=\"ALERT\" variant=\"danger\">\r\n              You can't send these values, Try again!!\r\n            </Alert>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"primary\"\r\n            disabled={usersSelected()}\r\n            onClick={handleDone}\r\n          >\r\n            Send Money\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <MyVerticallyCenteredModal\r\n        show={modalShow}\r\n        onHide={() => {\r\n          setModalShow(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ModalMe;\r\n","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\store\\index.js",[],"F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\store\\table-slice.js",["74","75"],"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nexport const fetchMyTableHistory = createAsyncThunk(\r\n  \"table/fetchMyTableHistory\",\r\n  async (_, thunkAPI) => {\r\n    try {\r\n      const response = await axios.get(\r\n        \"https://bank-system-app-default-rtdb.firebaseio.com/History.json\"\r\n      );\r\n      const data = response.data;\r\n      const mytableData = [];\r\n      for (const key in data) {\r\n        const everyTrans = {\r\n          id: key,\r\n          ...data[key],\r\n        };\r\n        mytableData.push(everyTrans);\r\n      }\r\n      return mytableData;\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\n// export const fetchTableUsers = createAsyncThunk(\r\n//   \"users/fetchTableUsers\",\r\n//   async (_, thunkAPI) => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         \"https://bank-system-app-default-rtdb.firebaseio.com/History.json\"\r\n//       );\r\n//       const data = response.data;\r\n//       const tableFinalData = [];\r\n//       for (const key in data) {\r\n//         const everyUser = {\r\n//           id: key,\r\n//           ...data[key],\r\n//         };\r\n//         tableFinalData.push(everyUser);\r\n//       }\r\n//       console.log(tableFinalData);\r\n//       return tableFinalData;\r\n//     } catch (error) {\r\n//       return thunkAPI.rejectWithValue(error);\r\n//     }\r\n//   }\r\n// );\r\nexport const setTableTrans = createAsyncThunk(\r\n  \"table/setTableTrans\",\r\n  async (myData, thunkAPI) => {\r\n    try {\r\n      const { firstUser, secondUser, amountChange, lastTrans, key } = myData;\r\n      const response = await axios.post(\r\n        \"https://bank-system-app-default-rtdb.firebaseio.com/History.json\",\r\n        {\r\n          from: firstUser,\r\n          to: secondUser,\r\n          key: key,\r\n          amount: amountChange,\r\n          date: lastTrans,\r\n        }\r\n      );\r\n      return response.data;\r\n    }catch(error) {\r\n      return thunkAPI.rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nconst initialTableState = { data: [], accBalance: 0, changed: false };\r\nconst tableSlice = createSlice({\r\n  name: \"table\",\r\n  initialState: initialTableState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchMyTableHistory.pending, (state) => {\r\n      state.data = [];\r\n      state.loading = \"loading\";\r\n    });\r\n    builder.addCase(fetchMyTableHistory.fulfilled, (state, action) => {\r\n      state.data= action.payload;\r\n      state.loading = \"loaded\";\r\n    });\r\n    builder.addCase(fetchMyTableHistory.rejected, (state, action) => {\r\n      state.loading = \"error\";\r\n      state.error = action.error.message;\r\n    });\r\n    builder.addCase(setTableTrans.pending, (state) => {\r\n      state.data = state.data;\r\n      state.loading = \"loading\";\r\n    });\r\n    builder.addCase(setTableTrans.fulfilled, (state, action) => {\r\n      state.loading = \"loaded\";\r\n    });\r\n    builder.addCase(setTableTrans.rejected, (state, action) => {\r\n      state.loading = \"error\";\r\n      state.error = action.error.message;\r\n    });\r\n  },\r\n});\r\n\r\nexport const {} = tableSlice.actions;\r\n\r\nexport default tableSlice.reducer;\r\n","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\components\\layout\\NavBar.js",["76"],"F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\store\\new-actions.js",["77","78","79"],"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n\r\n\r\n\r\nconst baseURL = \"https://bank-system-app-default-rtdb.firebaseio.com/Users.json\";\r\nexport const fetchTableUsers = createAsyncThunk(\r\n  \"users/fetchTableUsers\",\r\n  async (_, thunkAPI) => {\r\n    try {\r\n      const response = await axios.get(baseURL);\r\n      const data = response.data;\r\n      const ourData = [];\r\n      for (const key in data) {\r\n        const everyUser = {\r\n          id: key,\r\n          ...data[key],\r\n        };\r\n        ourData.push(everyUser);\r\n    }\r\n      console.log(ourData);\r\n      return ourData;\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\n\r\n\r\n// =(cart)=>\r\n\r\n\r\n\r\nexport const updateUserData = createAsyncThunk(\r\n  \"users/updateFirstUserBalance\",\r\n  async (myData, thunkAPI) => {\r\n    try {\r\n      const { userId, allData ,amountChange, lastTrans } = myData;\r\n      const response = await axios.put(\r\n        `https://bank-system-app-default-rtdb.firebaseio.com/Users/${userId}.json`,\r\n        {\r\n          ...allData,\r\n          accBalance: amountChange,\r\n          lastTrans: lastTrans,\r\n        }\r\n      );\r\n      // const updatedData = [];\r\n      // updatedData.push(response.data);\r\n      return (response.data);\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\n\r\nconst initialUsersState = {\r\n  loading: \"idle\",\r\n  data: [],\r\n  error: \"\",\r\n};\r\n\r\nexport const usersSlice = createSlice({\r\n  name: \"users\",\r\n  initialState: initialUsersState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchTableUsers.pending, (state) => {\r\n      state.data = [];\r\n      state.loading = \"loading\";\r\n    });\r\n    builder.addCase(fetchTableUsers.fulfilled, (state, { payload }) => {\r\n      state.data = payload;\r\n      state.loading = \"loaded\";\r\n    });\r\n    builder.addCase(fetchTableUsers.rejected, (state, action) => {\r\n      state.loading = \"error\";\r\n      state.error = action.error.message;\r\n    });\r\n    builder.addCase(updateUserData.pending, (state) => {\r\n      state.data = state.data;\r\n      state.loading = \"loading\";\r\n    });\r\n    builder.addCase(updateUserData.fulfilled, (state, action) => {\r\n      state.data = state.data.map(u => u.id !== action.payload.id ? u : action.payload);\r\n      state.loading = \"loaded\";\r\n    });\r\n    builder.addCase(updateUserData.rejected, (state, action) => {\r\n      state.loading = \"error\";\r\n      state.error = action.error.message;\r\n    });\r\n  },\r\n});\r\n\r\nexport const {} = usersSlice.actions;\r\n\r\nexport default usersSlice.reducer;","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\components\\layout\\UsersTableData.js",["80"],"import { useSelector } from \"react-redux\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport ModalMe from \"./Modal\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nexport const UsersTableData = ()=> {\r\n    const finalUsers = useSelector((state) => state.users.data);\r\n  \r\n    const divStyle = {\r\n        height: '20px',\r\n        width: '1200px',\r\n        textAlign: 'center',\r\n        verticalAlign: 'middle',\r\n        margin: '0 auto 2rem',\r\n      };\r\n\r\n    const tableHead = (\r\n      <thead size=\"sm\">\r\n        <tr>\r\n          <th>Id</th>\r\n          <th>Full Name</th>\r\n          <th>balance</th>\r\n          <th>Country</th>\r\n          <th>Transfer</th>\r\n        </tr>\r\n      </thead>\r\n    );\r\n    return (\r\n      <section>\r\n          <Table  bordered hover variant=\"dark\" size=\"sm\">\r\n              {finalUsers.length > 0 && tableHead }\r\n            <tbody >\r\n                {finalUsers.map((user) => (\r\n                  <tr key={user.id}>\r\n                    <td>{user.id +1 }</td>\r\n                    <td>{user.name}</td>\r\n                    <td>${user.accBalance}</td>\r\n                    <td>{user.country}</td>\r\n                    <td>\r\n                      <ModalMe modalKey={user.id}/>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n                </tbody>\r\n          </Table>\r\n      </section>\r\n    );\r\n};\r\nexport default UsersTableData;\r\n","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\components\\layout\\VerticalCenteredModal.js",[],"F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\components\\layout\\TransHistoryTable.js",["81","82"],"import { useSelector, useDispatch } from \"react-redux\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n \r\nexport const TransHistoryTable = () => {\r\n  const tableTrans = useSelector((state) => state.table.data);\r\n  const tableNew= [...tableTrans].reverse();\r\n\r\n    const divStyle = {\r\n    height: \"20px\",\r\n    width: \"1200px\",\r\n    textAlign: \"center\",\r\n    verticalAlign: \"middle\",\r\n    margin: \"0 auto 2rem\",\r\n  };\r\n\r\n  const tableHead = (\r\n    <thead size=\"sm\">\r\n      <tr>\r\n        <th>Id</th>\r\n        <th>From</th>\r\n        <th>To</th>\r\n        <th>Amount</th>\r\n        <th>History</th>\r\n      </tr>\r\n    </thead>\r\n  );\r\n  return (\r\n    <section>\r\n      <Table bordered hover variant=\"dark\" size=\"sm\">\r\n        {tableTrans.length > 0 && tableHead}\r\n        <tbody>\r\n          {tableNew.map((user) => (\r\n            <tr key={user.key}>\r\n              <td>{tableTrans.length > 0 && `${user.id.substr(2, 6)}... `}</td>\r\n              <td>{user.from}</td>\r\n              <td>{user.to}</td>\r\n              <td>${user.amount}</td>\r\n              <td>{user.date}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    </section>\r\n  );\r\n};\r\nexport default TransHistoryTable;\r\n","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\components\\layout\\Home.js",[],"F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\components\\layout\\GetUsersButton.js",["83","84","85"],"import React, { Fragment } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { fetchTableUsers } from \"../../store/new-actions\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport UsersTableData from \"./UsersTableData\";\r\n\r\nexport default function GetUsersButton() {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(state => state.users.loading);\r\n\r\n  \r\n  const finalUsers = useSelector((state) => state.users.data);\r\n\r\n    const divStyle = {\r\n      textAlign: \"center\",\r\n      verticalAlign: \"middle\",\r\n      margin: \"2rem auto\",\r\n      display: 'flex',\r\n\r\n    };\r\n  \r\n  return (\r\n    <Fragment>\r\n      <section>\r\n        <div>\r\n          <Button\r\n            onClick={() => dispatch(fetchTableUsers())}\r\n            disabled={loading == \"loading\"}\r\n            style={divStyle}\r\n            variant=\"dark\"\r\n            size=\"lg\"\r\n          >\r\n            {loading == 'loading' ?  \"Loading ...\" : \"Get Users\" }\r\n          </Button>\r\n        </div>\r\n        <UsersTableData />\r\n      </section>\r\n    </Fragment>\r\n  );\r\n}\r\n","F:\\Programming\\Maximilian\\REACT\\Banking-System-app\\src\\components\\layout\\TransHistoryButton.js",["86","87","88"],"import React, { Fragment } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { Button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { fetchMyTableHistory } from \"../../store/table-slice\";\r\nimport TransHistoryTable from \"./TransHistoryTable\";\r\n\r\nexport default function GetUsersButton() {\r\n\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => state.table.loading);\r\n  const finalUsers = useSelector((state) => state.users.data);\r\n\r\n  const divStyle = {\r\n    textAlign: \"center\",\r\n    verticalAlign: \"middle\",\r\n    margin: \"2rem auto\",\r\n    display: \"flex\",\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <section>\r\n        <div>\r\n          <Button\r\n            onClick={() => dispatch(fetchMyTableHistory())}\r\n            disabled={loading == \"loading\"}\r\n            style={divStyle}\r\n            variant=\"dark\"\r\n            size=\"lg\"\r\n          >\r\n            {loading == \"loading\" ? \"Loading ...\" : \"All Transactions\"}\r\n          </Button>\r\n        </div>\r\n        <TransHistoryTable />\r\n      </section>\r\n    </Fragment>\r\n  );\r\n}\r\n",{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":8,"column":8,"nodeType":"95","messageId":"96","endLine":8,"endColumn":22},{"ruleId":"93","severity":1,"message":"97","line":9,"column":25,"nodeType":"95","messageId":"96","endLine":9,"endColumn":29},{"ruleId":"93","severity":1,"message":"98","line":25,"column":10,"nodeType":"95","messageId":"96","endLine":25,"endColumn":21},{"ruleId":"99","severity":1,"message":"100","line":45,"column":22,"nodeType":"101","messageId":"102","endLine":45,"endColumn":24},{"ruleId":"99","severity":1,"message":"100","line":55,"column":22,"nodeType":"101","messageId":"102","endLine":55,"endColumn":24},{"ruleId":"99","severity":1,"message":"100","line":59,"column":36,"nodeType":"101","messageId":"102","endLine":59,"endColumn":38},{"ruleId":"99","severity":1,"message":"100","line":68,"column":25,"nodeType":"101","messageId":"102","endLine":68,"endColumn":27},{"ruleId":"99","severity":1,"message":"100","line":72,"column":28,"nodeType":"101","messageId":"102","endLine":72,"endColumn":30},{"ruleId":"93","severity":1,"message":"103","line":108,"column":13,"nodeType":"95","messageId":"96","endLine":108,"endColumn":25},{"ruleId":"104","severity":1,"message":"105","line":90,"column":20,"nodeType":"106","messageId":"107","endLine":90,"endColumn":30},{"ruleId":"108","severity":1,"message":"109","line":103,"column":14,"nodeType":"110","messageId":"102","endLine":103,"endColumn":16},{"ruleId":"93","severity":1,"message":"111","line":4,"column":8,"nodeType":"95","messageId":"96","endLine":4,"endColumn":15},{"ruleId":"93","severity":1,"message":"112","line":3,"column":10,"nodeType":"95","messageId":"96","endLine":3,"endColumn":21},{"ruleId":"104","severity":1,"message":"105","line":84,"column":20,"nodeType":"106","messageId":"107","endLine":84,"endColumn":30},{"ruleId":"108","severity":1,"message":"109","line":98,"column":14,"nodeType":"110","messageId":"102","endLine":98,"endColumn":16},{"ruleId":"93","severity":1,"message":"113","line":10,"column":11,"nodeType":"95","messageId":"96","endLine":10,"endColumn":19},{"ruleId":"93","severity":1,"message":"114","line":1,"column":23,"nodeType":"95","messageId":"96","endLine":1,"endColumn":34},{"ruleId":"93","severity":1,"message":"113","line":10,"column":11,"nodeType":"95","messageId":"96","endLine":10,"endColumn":19},{"ruleId":"93","severity":1,"message":"115","line":15,"column":9,"nodeType":"95","messageId":"96","endLine":15,"endColumn":19},{"ruleId":"99","severity":1,"message":"100","line":31,"column":31,"nodeType":"101","messageId":"102","endLine":31,"endColumn":33},{"ruleId":"99","severity":1,"message":"100","line":36,"column":22,"nodeType":"101","messageId":"102","endLine":36,"endColumn":24},{"ruleId":"93","severity":1,"message":"115","line":14,"column":9,"nodeType":"95","messageId":"96","endLine":14,"endColumn":19},{"ruleId":"99","severity":1,"message":"100","line":29,"column":31,"nodeType":"101","messageId":"102","endLine":29,"endColumn":33},{"ruleId":"99","severity":1,"message":"100","line":34,"column":22,"nodeType":"101","messageId":"102","endLine":34,"endColumn":24},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"no-unused-vars","'UsersTableData' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'userMessage' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'amountChange' is assigned a value but never used.","no-self-assign","'state.data' is assigned to itself.","MemberExpression","selfAssignment","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'classes' is defined but never used.","'useSelector' is defined but never used.","'divStyle' is assigned a value but never used.","'useDispatch' is defined but never used.","'finalUsers' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]